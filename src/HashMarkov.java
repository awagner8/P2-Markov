import java.util.*;

public class HashMarkov implements MarkovInterface {

    protected String[] myWords;		// Training text split into array of words 
	protected Random myRandom;		// Random number generator
	protected int myOrder;			// Length of WordGrams used
    protected HashMap<WordGram, List<String>> myMap;


    public HashMarkov(int order) {
        this.myWords = new String[0];
        this.myRandom = new Random();
        this.myOrder = order;
        this.myMap = new HashMap<>();
	}

    
    public void setTraining(String text) {
        myMap.clear();
		this.myWords = text.split("\\s+");
        WordGram wg = new WordGram(this.myWords, 0, this.myOrder);

        for (int i = wg.length(); i < this.myWords.length; i++) {
            String current = this.myWords[i];
            List<String> cnst = (this.myMap.containsKey(wg) ? this.myMap.get(wg) : new ArrayList<>());

            cnst.add(current);
            this.myMap.put(wg, cnst);

            wg = wg.shiftAdd(current);
        }
	}


    public List<String> getFollows(WordGram wgram) {
        List<String> boobies = new ArrayList<>();
        return this.myMap.get(wgram) != null ? this.myMap.get(wgram) : boobies;
	}


    public String getRandomText(int length){
		ArrayList<String> tits = new ArrayList<>();

		int index = myRandom.nextInt(myWords.length - myOrder + 1);
		WordGram current = new WordGram(myWords, index, myOrder);
		tits.add(current.toString());

        for (int i = 0; i < length - myOrder; i++) {
            List<String> possibleFollows = this.getFollows(current);
            String nextWord;

            if (possibleFollows.size() == 0) {
                int randomIndex = myRandom.nextInt(myWords.length);
                nextWord = this.myWords[randomIndex];
            } else {
                int randomIndex = myRandom.nextInt(possibleFollows.size());
                nextWord = possibleFollows.get(randomIndex);
            }

            tits.add(nextWord);
            current = current.shiftAdd(nextWord);
        }

        return String.join(" ", tits);
	}


    public int getOrder() {
		return myOrder;
	}


	public void setSeed(long seed) {
		myRandom.setSeed(seed);
	}
}

/*import java.util.*;

public class HashMarkov implements MarkovInterface {

    protected HashMap<WordGram, List<String>> myMap;
    protected String[] myWords;		// Training text split into array of words 
	protected Random myRandom;		// Random number generator
	protected int myOrder;
    protected static String PSEUDO_EOS = "";
    
    public HashMarkov() {
		this(3);
	}

    public HashMarkov(int order) {
        this.myOrder = order;
        this.myRandom = new Random();
        this.myMap = new HashMap<>();
    } 


    @Override
    public void setTraining(String text) {
        myWords = text.split("\\s+");
        myMap.clear();
        WordGram wg = new WordGram(myWords, 0, myOrder);
        for(int k =myOrder; k < myWords.length; k++){
            if(!myMap.containsKey(wg)) myMap.put(wg, new ArrayList<String>());
            myMap.get(wg).add(myWords[k]);
            wg = wg.shiftAdd(myWords[k]);
        }
        //if(!myMap.containsKey(wg)) myMap.put(wg, new ArrayList<String>());
    }        
            

    @Override
    public List<String> getFollows(WordGram wgram) {
        if (!myMap.containsKey(wgram)){
			List<String> Empty = new ArrayList<>();
			return Empty;
		}
		return myMap.get(wgram);
    }

    	/**
	 * Generates length random words based on training text.
	 * Initial words are a random WordGram taken from the training text.
	 * Subsequent words are generated by calling getNext on the current
	 * WordGram, which is then shifted to include the newly generated 
	 * word at the end. Words are separated by spaces in returned string.
	 * @param length Number of words to generate
	 * @returns length randomly generated words using Markov model, 
	 * separated by spaces
	 */
    /*@Override
    public String getRandomText(int length) {
        ArrayList<String> randomWords = new ArrayList<>();
        int index = myRandom.nextInt(myWords.length - myOrder+1);
        WordGram current = new WordGram(myWords, index, myOrder);
        randomWords.add(current.toString());
        for(int k = 0; k < length - myOrder; k++){
            List<String> follows = getFollows(current);
            String next = "";
            if(follows.size() == 0) {
                int random = myRandom.nextInt(myWords.length);
                next = myWords[random];
            }
            else{
                index = myRandom.nextInt(follows.size());
                next = follows.get(index);
            }
            randomWords.add(next);
            current = current.shiftAdd(next);
        }


		return String.join(" ", randomWords);
	}


    @Override
    public int getOrder() {
        return myOrder;
    }

    @Override
    public void setSeed(long seed) {
        myRandom.setSeed(seed);
    }
    
}*/
