import java.util.*;

public class HashMarkov implements MarkovInterface {

    protected HashMap<WordGram, List<String>> myMap;
    protected String[] myWords;		// Training text split into array of words 
	protected Random myRandom;		// Random number generator
	protected int myOrder;
    
    public HashMarkov() {
		this(3);
	}

    public HashMarkov(int order) {
        myOrder = order;
        myRandom = new Random();
        myMap = new HashMap<>();
    } 


    @Override
    public void setTraining(String text) {
        myWords = text.split("\\s+");
        myMap.clear();
        WordGram wg = new WordGram(myWords, 0, myOrder);
        for(int k =myOrder; k < myWords.length; k++){
            if(!myMap.containsKey(wg)) myMap.put(wg, new ArrayList<String>());
            myMap.get(wg).add(myWords[k]);
            wg = wg.shiftAdd(myWords[k]);
        }
    }        
            

    @Override
    public List<String> getFollows(WordGram wgram) {
        if (!myMap.containsKey(wgram)){
			List<String> Empty = new ArrayList<>();
			return Empty;
		}
		return myMap.get(wgram);
    }

    	/**
	 * Generates length random words based on training text.
	 * Initial words are a random WordGram taken from the training text.
	 * Subsequent words are generated by calling getNext on the current
	 * WordGram, which is then shifted to include the newly generated 
	 * word at the end. Words are separated by spaces in returned string.
	 * @param length Number of words to generate
	 * @returns length randomly generated words using Markov model, 
	 * separated by spaces
	 */
    @Override
    public String getRandomText(int length) {
        ArrayList<String> randomWords = new ArrayList<>();
        int index = myRandom.nextInt(myWords.length - myOrder+1);
        WordGram current = new WordGram(myWords, index, myOrder);
        randomWords.add(current.toString());
        for(int k = 0; k < length - myOrder; k++){
            List<String> follows = getFollows(current);
            String next = "";
            if(follows.size() == 0) {
                int random = myRandom.nextInt(myWords.length);
                next = myWords[random];
            }
            else{
                index = myRandom.nextInt(follows.size());
                next = follows.get(index);
            }
            randomWords.add(next);
            current = current.shiftAdd(next);
        }


		return String.join(" ", randomWords);
	}


    @Override
    public int getOrder() {
        return myOrder;
    }

    @Override
    public void setSeed(long seed) {
        myRandom.setSeed(seed);
    }
    
}
